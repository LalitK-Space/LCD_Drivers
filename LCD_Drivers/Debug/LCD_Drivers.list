
LCD_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bb0  08000bb0  00010bb8  2**0
                  CONTENTS
  4 .ARM          00000000  08000bb0  08000bb0  00010bb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bb0  08000bb8  00010bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bb0  08000bb0  00010bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bb4  08000bb4  00010bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bb8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c72  00000000  00000000  00010be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ba  00000000  00000000  0001185a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00011c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  00011d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027b3  00000000  00000000  00011e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001639  00000000  00000000  000145e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a9c5  00000000  00000000  00015c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000205e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003ac  00000000  00000000  00020634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b70 	.word	0x08000b70

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b70 	.word	0x08000b70

080001e8 <GPIO_PeriClockControl>:
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a66      	ldr	r2, [pc, #408]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b66      	ldr	r3, [pc, #408]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a65      	ldr	r2, [pc, #404]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
				// Meh
			}
		}

	}
}
 800020e:	e0bc      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a63      	ldr	r2, [pc, #396]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b60      	ldr	r3, [pc, #384]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5f      	ldr	r2, [pc, #380]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0b1      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5e      	ldr	r2, [pc, #376]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b5b      	ldr	r3, [pc, #364]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a5a      	ldr	r2, [pc, #360]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a6      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a5a      	ldr	r2, [pc, #360]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b55      	ldr	r3, [pc, #340]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a54      	ldr	r2, [pc, #336]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e09b      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a55      	ldr	r2, [pc, #340]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b50      	ldr	r3, [pc, #320]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4f      	ldr	r2, [pc, #316]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e090      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a51      	ldr	r2, [pc, #324]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b4a      	ldr	r3, [pc, #296]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a49      	ldr	r2, [pc, #292]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e085      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4c      	ldr	r2, [pc, #304]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b45      	ldr	r3, [pc, #276]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a44      	ldr	r2, [pc, #272]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e07a      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a48      	ldr	r2, [pc, #288]	; (80003b8 <GPIO_PeriClockControl+0x1d0>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3e      	ldr	r2, [pc, #248]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06f      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a43      	ldr	r2, [pc, #268]	; (80003bc <GPIO_PeriClockControl+0x1d4>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d16b      	bne.n	800038a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80002b2:	4b3a      	ldr	r3, [pc, #232]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a39      	ldr	r2, [pc, #228]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e064      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
		if (EnorDi == DISABLE)
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d161      	bne.n	800038a <GPIO_PeriClockControl+0x1a2>
			if (pGPIOx == GPIOA)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0xf4>
				GPIOA_PCLK_DI();
 80002ce:	4b33      	ldr	r3, [pc, #204]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a32      	ldr	r2, [pc, #200]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e056      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOB)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0x10a>
				GPIOB_PCLK_DI();
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e04b      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOC)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a2b      	ldr	r2, [pc, #172]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x120>
				GPIOC_PCLK_DI();
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a27      	ldr	r2, [pc, #156]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e040      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOD)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a27      	ldr	r2, [pc, #156]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x136>
				GPIOD_PCLK_DI();
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a21      	ldr	r2, [pc, #132]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e035      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x14c>
				GPIOE_PCLK_DI();
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e02a      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOF)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a1e      	ldr	r2, [pc, #120]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x162>
				GPIOF_PCLK_DI();
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a16      	ldr	r2, [pc, #88]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e01f      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOG)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x178>
				GPIOG_PCLK_EN();
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a11      	ldr	r2, [pc, #68]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e014      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOH)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <GPIO_PeriClockControl+0x1d0>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x18e>
				GPIOH_PCLK_DI();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e009      	b.n	800038a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOI)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <GPIO_PeriClockControl+0x1d4>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d105      	bne.n	800038a <GPIO_PeriClockControl+0x1a2>
				GPIOI_PCLK_DI();
 800037e:	4b07      	ldr	r3, [pc, #28]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a06      	ldr	r2, [pc, #24]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 8000384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40020000 	.word	0x40020000
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020400 	.word	0x40020400
 80003a4:	40020800 	.word	0x40020800
 80003a8:	40020c00 	.word	0x40020c00
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40021400 	.word	0x40021400
 80003b4:	40021800 	.word	0x40021800
 80003b8:	40021c00 	.word	0x40021c00
 80003bc:	40022000 	.word	0x40022000

080003c0 <GPIO_Init>:
 * Parameter 1	:	Pointer to GPIO Handle
 * Return Type	:	none (void)
 * Note		:	Peripheral Clock is enabled at starting of the function, so users need not do it explicitly.
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2101      	movs	r1, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff0a 	bl	80001e8 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]

	// ->  1. Configure the GPIO pin Mode

	// As defined in x_gpio_drivers.h, Pin Modes greater than 3 are interrupt modes
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d821      	bhi.n	8000424 <GPIO_Init+0x64>
	{
		// In Pin Mode Register, each pin takes 2 bit fields [Shift value according to pin number]
		// Logic: Mode value left shifted by (2 * pin number)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	461a      	mov	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	617b      	str	r3, [r7, #20]

		// Store 'temp' i.e. Mode Value in MODE Register [Set/touch only required bit leave rest untouched '|']
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 	// Clear required bits
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	4619      	mov	r1, r3
 80003fe:	2303      	movs	r3, #3
 8000400:	408b      	lsls	r3, r1
 8000402:	43db      	mvns	r3, r3
 8000404:	4619      	mov	r1, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	400a      	ands	r2, r1
 800040c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;							// Update required bits
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	697a      	ldr	r2, [r7, #20]
 800041a:	430a      	orrs	r2, r1
 800041c:	601a      	str	r2, [r3, #0]

		// Reset 'temp'
		temp = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	e0ca      	b.n	80005ba <GPIO_Init+0x1fa>
		 * 6. Enable interrupt reception on that IRQ number [NVIC Registers]
		 * 7. Implement the IRQ handler.
		 * */

		// -> Configure the edge trigger
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b04      	cmp	r3, #4
 800042a:	d117      	bne.n	800045c <GPIO_Init+0x9c>
		{
			// Configure the Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800042c:	4b4a      	ldr	r3, [pc, #296]	; (8000558 <GPIO_Init+0x198>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7912      	ldrb	r2, [r2, #4]
 8000434:	4611      	mov	r1, r2
 8000436:	2201      	movs	r2, #1
 8000438:	408a      	lsls	r2, r1
 800043a:	4611      	mov	r1, r2
 800043c:	4a46      	ldr	r2, [pc, #280]	; (8000558 <GPIO_Init+0x198>)
 800043e:	430b      	orrs	r3, r1
 8000440:	60d3      	str	r3, [r2, #12]

			// As a safe side, Clear same bit in RTSR so just FTSR is configured
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <GPIO_Init+0x198>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a40      	ldr	r2, [pc, #256]	; (8000558 <GPIO_Init+0x198>)
 8000456:	400b      	ands	r3, r1
 8000458:	6093      	str	r3, [r2, #8]
 800045a:	e035      	b.n	80004c8 <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d117      	bne.n	8000494 <GPIO_Init+0xd4>
		{
			// Configure the Rising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000464:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <GPIO_Init+0x198>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7912      	ldrb	r2, [r2, #4]
 800046c:	4611      	mov	r1, r2
 800046e:	2201      	movs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4611      	mov	r1, r2
 8000474:	4a38      	ldr	r2, [pc, #224]	; (8000558 <GPIO_Init+0x198>)
 8000476:	430b      	orrs	r3, r1
 8000478:	6093      	str	r3, [r2, #8]

			// As a safe side, Clear same bit in FTSR so just RTSR is configured
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <GPIO_Init+0x198>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	43d2      	mvns	r2, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a32      	ldr	r2, [pc, #200]	; (8000558 <GPIO_Init+0x198>)
 800048e:	400b      	ands	r3, r1
 8000490:	60d3      	str	r3, [r2, #12]
 8000492:	e019      	b.n	80004c8 <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b06      	cmp	r3, #6
 800049a:	d115      	bne.n	80004c8 <GPIO_Init+0x108>
		{
			// Configure the both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <GPIO_Init+0x198>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a2a      	ldr	r2, [pc, #168]	; (8000558 <GPIO_Init+0x198>)
 80004ae:	430b      	orrs	r3, r1
 80004b0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <GPIO_Init+0x198>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a25      	ldr	r2, [pc, #148]	; (8000558 <GPIO_Init+0x198>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	6093      	str	r3, [r2, #8]
		// -> Configure the GPIO Port Selection in SYSCFG_EXTICR
		// GPIO_Pin_x of WHICH port is delivering interrupt? decided by GPIO Port selection [By default, PORTA]

		uint8_t SYSArrayIndex, SYSBitField;

		SYSArrayIndex = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 4;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	089b      	lsrs	r3, r3, #2
 80004ce:	74fb      	strb	r3, [r7, #19]
		SYSBitField	  = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	f003 0303 	and.w	r3, r3, #3
 80004d8:	74bb      	strb	r3, [r7, #18]

		// Now store the Port Code
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1f      	ldr	r2, [pc, #124]	; (800055c <GPIO_Init+0x19c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d04d      	beq.n	8000580 <GPIO_Init+0x1c0>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <GPIO_Init+0x1a0>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d032      	beq.n	8000554 <GPIO_Init+0x194>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <GPIO_Init+0x1a4>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d02b      	beq.n	8000550 <GPIO_Init+0x190>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <GPIO_Init+0x1a8>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d024      	beq.n	800054c <GPIO_Init+0x18c>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <GPIO_Init+0x1ac>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d01d      	beq.n	8000548 <GPIO_Init+0x188>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <GPIO_Init+0x1b0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d016      	beq.n	8000544 <GPIO_Init+0x184>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <GPIO_Init+0x1b4>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d00f      	beq.n	8000540 <GPIO_Init+0x180>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <GPIO_Init+0x1b8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d008      	beq.n	800053c <GPIO_Init+0x17c>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <GPIO_Init+0x1bc>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d101      	bne.n	8000538 <GPIO_Init+0x178>
 8000534:	2308      	movs	r3, #8
 8000536:	e024      	b.n	8000582 <GPIO_Init+0x1c2>
 8000538:	2300      	movs	r3, #0
 800053a:	e022      	b.n	8000582 <GPIO_Init+0x1c2>
 800053c:	2307      	movs	r3, #7
 800053e:	e020      	b.n	8000582 <GPIO_Init+0x1c2>
 8000540:	2306      	movs	r3, #6
 8000542:	e01e      	b.n	8000582 <GPIO_Init+0x1c2>
 8000544:	2305      	movs	r3, #5
 8000546:	e01c      	b.n	8000582 <GPIO_Init+0x1c2>
 8000548:	2304      	movs	r3, #4
 800054a:	e01a      	b.n	8000582 <GPIO_Init+0x1c2>
 800054c:	2303      	movs	r3, #3
 800054e:	e018      	b.n	8000582 <GPIO_Init+0x1c2>
 8000550:	2302      	movs	r3, #2
 8000552:	e016      	b.n	8000582 <GPIO_Init+0x1c2>
 8000554:	2301      	movs	r3, #1
 8000556:	e014      	b.n	8000582 <GPIO_Init+0x1c2>
 8000558:	40013c00 	.word	0x40013c00
 800055c:	40020000 	.word	0x40020000
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800
 8000568:	40020c00 	.word	0x40020c00
 800056c:	40021000 	.word	0x40021000
 8000570:	40021400 	.word	0x40021400
 8000574:	40021800 	.word	0x40021800
 8000578:	40021c00 	.word	0x40021c00
 800057c:	40022000 	.word	0x40022000
 8000580:	2300      	movs	r3, #0
 8000582:	747b      	strb	r3, [r7, #17]
		SYSCFG_EN();												   // Clock Enable
 8000584:	4b5b      	ldr	r3, [pc, #364]	; (80006f4 <GPIO_Init+0x334>)
 8000586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000588:	4a5a      	ldr	r2, [pc, #360]	; (80006f4 <GPIO_Init+0x334>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[SYSArrayIndex] = portcode << (SYSBitField * 4); // before configuring, enable clock
 8000590:	7c7a      	ldrb	r2, [r7, #17]
 8000592:	7cbb      	ldrb	r3, [r7, #18]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	fa02 f103 	lsl.w	r1, r2, r3
 800059a:	4a57      	ldr	r2, [pc, #348]	; (80006f8 <GPIO_Init+0x338>)
 800059c:	7cfb      	ldrb	r3, [r7, #19]
 800059e:	3302      	adds	r3, #2
 80005a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// -> Enable EXTI Interrupt delivery using Interrupt Mask Register
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b55      	ldr	r3, [pc, #340]	; (80006fc <GPIO_Init+0x33c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a51      	ldr	r2, [pc, #324]	; (80006fc <GPIO_Init+0x33c>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
	}

	// -> 2. Configure the GPIO Speed

	// Logic: Speed value left shifted by 2 * pin number
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 				// Clear required bits
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	4619      	mov	r1, r3
 80005d8:	2303      	movs	r3, #3
 80005da:	408b      	lsls	r3, r1
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;										// Update required bits
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6899      	ldr	r1, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	609a      	str	r2, [r3, #8]

	// Reset 'temp'
	temp = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

	// -> 3. Configure the Pull-up and Pull-down setting

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	79db      	ldrb	r3, [r3, #7]
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	4619      	mov	r1, r3
 800061a:	2303      	movs	r3, #3
 800061c:	408b      	lsls	r3, r1
 800061e:	43db      	mvns	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	400a      	ands	r2, r1
 8000628:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68d9      	ldr	r1, [r3, #12]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	430a      	orrs	r2, r1
 8000638:	60da      	str	r2, [r3, #12]

	temp = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]

	// -> 4. Configure the GPIO Output type

	// Each Pin takes only 1 bit field thats why (1 * pin number)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	7a1b      	ldrb	r3, [r3, #8]
 8000642:	461a      	mov	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	2301      	movs	r3, #1
 800065c:	408b      	lsls	r3, r1
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6859      	ldr	r1, [r3, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	430a      	orrs	r2, r1
 8000678:	605a      	str	r2, [r3, #4]

	temp = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

	// -> 5. Configure the Alternate Functionality

	// If mode is selected as Alternate Function then only configure for Alternate Functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	795b      	ldrb	r3, [r3, #5]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d131      	bne.n	80006ea <GPIO_Init+0x32a>
		//      : then, to get Bit position (y = (pin_number % 8))
		//		AF[x] = alt_fnc_value  << (4 * y)

		uint8_t AFarrayIndex, AFbitField;

		AFarrayIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	743b      	strb	r3, [r7, #16]
		AFbitField	 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] &= ~(0xF << (4 * AFbitField));					// Clear required Bits
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7c3a      	ldrb	r2, [r7, #16]
 800069e:	3208      	adds	r2, #8
 80006a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	220f      	movs	r2, #15
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	7c3a      	ldrb	r2, [r7, #16]
 80006b8:	4001      	ands	r1, r0
 80006ba:	3208      	adds	r2, #8
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * AFbitField);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	7c3a      	ldrb	r2, [r7, #16]
 80006c6:	3208      	adds	r2, #8
 80006c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7a5b      	ldrb	r3, [r3, #9]
 80006d0:	461a      	mov	r2, r3
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	7c3a      	ldrb	r2, [r7, #16]
 80006e2:	4301      	orrs	r1, r0
 80006e4:	3208      	adds	r2, #8
 80006e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40013c00 	.word	0x40013c00

08000700 <GPIO_WriteToOutputPin>:
 * Parameter 3	:	Value to be written
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
 800070c:	4613      	mov	r3, r2
 800070e:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 8000710:	78bb      	ldrb	r3, [r7, #2]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d109      	bne.n	800072a <GPIO_WriteToOutputPin+0x2a>
	{
		// write 1 to the OUTPUT DATA Register at the bit position corresponds to given pin number
		pGPIOx->ODR |= (1 << PinNumber);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	78fa      	ldrb	r2, [r7, #3]
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	615a      	str	r2, [r3, #20]
	else
	{
		// clear or write 0 to the OUTPUT DATA Register at bit position corresponds to given pin number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000728:	e009      	b.n	800073e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	78fa      	ldrb	r2, [r7, #3]
 8000730:	2101      	movs	r1, #1
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	43d2      	mvns	r2, r2
 8000738:	401a      	ands	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	615a      	str	r2, [r3, #20]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <LCD_Init>:
 * Parameters	:	none (void)
 * Return Type	:	none (void)
 * Note		:
 * -------------------------------------------------------------------------------------------- */
void LCD_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
	/* -- Step 1. Configure the GPIO Pins -- */
	GPIO_Handle_t lcdPins;

	lcdPins.pGPIOx = LCD_GPIO_PORT;
 8000752:	4b51      	ldr	r3, [pc, #324]	; (8000898 <LCD_Init+0x14c>)
 8000754:	607b      	str	r3, [r7, #4]

	// -- Configuring RS Pin
	lcdPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000756:	2301      	movs	r3, #1
 8000758:	727b      	strb	r3, [r7, #9]
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800075a:	2308      	movs	r3, #8
 800075c:	723b      	strb	r3, [r7, #8]
	lcdPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800075e:	2300      	movs	r3, #0
 8000760:	733b      	strb	r3, [r7, #12]
	lcdPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000762:	2300      	movs	r3, #0
 8000764:	72fb      	strb	r3, [r7, #11]
	lcdPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	72bb      	strb	r3, [r7, #10]

	// Configure RS pin
	GPIO_Init(&lcdPins);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe27 	bl	80003c0 <GPIO_Init>

	// -- Configuring RW Pin
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000772:	2309      	movs	r3, #9
 8000774:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe21 	bl	80003c0 <GPIO_Init>

	//-- Configuring E Pin
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_E;
 800077e:	230a      	movs	r3, #10
 8000780:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe1b 	bl	80003c0 <GPIO_Init>

	//-- Configuring D4 Pin
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800078a:	230b      	movs	r3, #11
 800078c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe15 	bl	80003c0 <GPIO_Init>

	//-- Configuring D5 Pin
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000796:	230c      	movs	r3, #12
 8000798:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe0f 	bl	80003c0 <GPIO_Init>

	//-- Configuring D6 Pin
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 80007a2:	230d      	movs	r3, #13
 80007a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe09 	bl	80003c0 <GPIO_Init>

	//-- Configuring D7 Pin
	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 80007ae:	230e      	movs	r3, #14
 80007b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe03 	bl	80003c0 <GPIO_Init>


	/* -- Step 1 a. RESET all PINs State -- */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	4836      	ldr	r0, [pc, #216]	; (8000898 <LCD_Init+0x14c>)
 80007c0:	f7ff ff9e 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2109      	movs	r1, #9
 80007c8:	4833      	ldr	r0, [pc, #204]	; (8000898 <LCD_Init+0x14c>)
 80007ca:	f7ff ff99 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_E, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	210a      	movs	r1, #10
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <LCD_Init+0x14c>)
 80007d4:	f7ff ff94 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	210b      	movs	r1, #11
 80007dc:	482e      	ldr	r0, [pc, #184]	; (8000898 <LCD_Init+0x14c>)
 80007de:	f7ff ff8f 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210c      	movs	r1, #12
 80007e6:	482c      	ldr	r0, [pc, #176]	; (8000898 <LCD_Init+0x14c>)
 80007e8:	f7ff ff8a 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	210d      	movs	r1, #13
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <LCD_Init+0x14c>)
 80007f2:	f7ff ff85 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	210e      	movs	r1, #14
 80007fa:	4827      	ldr	r0, [pc, #156]	; (8000898 <LCD_Init+0x14c>)
 80007fc:	f7ff ff80 	bl	8000700 <GPIO_WriteToOutputPin>
	 * > Make RS = 0, RW = 0, D7 = 0, D6 = 0, D5 = 1, D4 = 0
	 *
	 * */

	/* -- Step 2a. Wait for ~40ms -- */
	Delay_ms(40);
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f000 f925 	bl	8000a50 <Delay_ms>

	/* -- Step 2b. Make RS = 0, RW = 0, D7 = 0, D6 = 0, D5 = 1, D4 = 1 -- */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	4823      	ldr	r0, [pc, #140]	; (8000898 <LCD_Init+0x14c>)
 800080c:	f7ff ff78 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2109      	movs	r1, #9
 8000814:	4820      	ldr	r0, [pc, #128]	; (8000898 <LCD_Init+0x14c>)
 8000816:	f7ff ff73 	bl	8000700 <GPIO_WriteToOutputPin>

	// For Data bits[D7:D4]
	Write_4bits(0x3);	// D7 = 0, D6 = 0, D5 = 1, D4 = 1
 800081a:	2003      	movs	r0, #3
 800081c:	f000 f8c8 	bl	80009b0 <Write_4bits>

	/* -- Step 2c. Wait for ~4.1ms -- */
	Delay_ms(5);
 8000820:	2005      	movs	r0, #5
 8000822:	f000 f915 	bl	8000a50 <Delay_ms>

	/* -- Step 2d. Make RS = 0, RW = 0, D7 = 0, D6 = 0, D5 = 1, D4 = 1 -- */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <LCD_Init+0x14c>)
 800082c:	f7ff ff68 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2109      	movs	r1, #9
 8000834:	4818      	ldr	r0, [pc, #96]	; (8000898 <LCD_Init+0x14c>)
 8000836:	f7ff ff63 	bl	8000700 <GPIO_WriteToOutputPin>

	// For Data bits[D7:D4]
	Write_4bits(0x3);	// D7 = 0, D6 = 0, D5 = 1, D4 = 1
 800083a:	2003      	movs	r0, #3
 800083c:	f000 f8b8 	bl	80009b0 <Write_4bits>

	/* -- Step 2e. Wait for ~100us -- */
	Delay_us(150);
 8000840:	2096      	movs	r0, #150	; 0x96
 8000842:	f000 f91e 	bl	8000a82 <Delay_us>

	/* -- Step 2f. Make RS = 0, RW = 0, D7 = 0, D6 = 0, D5 = 1, D4 = 1 -- */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4813      	ldr	r0, [pc, #76]	; (8000898 <LCD_Init+0x14c>)
 800084c:	f7ff ff58 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2109      	movs	r1, #9
 8000854:	4810      	ldr	r0, [pc, #64]	; (8000898 <LCD_Init+0x14c>)
 8000856:	f7ff ff53 	bl	8000700 <GPIO_WriteToOutputPin>

	// For Data bits[D7:D4]
	Write_4bits(0x3);	// D7 = 0, D6 = 0, D5 = 1, D4 = 1
 800085a:	2003      	movs	r0, #3
 800085c:	f000 f8a8 	bl	80009b0 <Write_4bits>

	/* -- Step 2g. Make RS = 0, RW = 0, D7 = 0, D6 = 0, D5 = 1, D4 = 0 -- */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LCD_Init+0x14c>)
 8000866:	f7ff ff4b 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2109      	movs	r1, #9
 800086e:	480a      	ldr	r0, [pc, #40]	; (8000898 <LCD_Init+0x14c>)
 8000870:	f7ff ff46 	bl	8000700 <GPIO_WriteToOutputPin>

	// For Data Bits
	Write_4bits(0x2);	// D7 = 0, D6 = 0, D5 = 1, D4 = 0
 8000874:	2002      	movs	r0, #2
 8000876:	f000 f89b 	bl	80009b0 <Write_4bits>

	/* -- Step 3. Initialization Commands -- */

	// a. Function Set
	LCD_SendCommands(LCD_CMD_4DL_2N_5X8F);
 800087a:	2028      	movs	r0, #40	; 0x28
 800087c:	f000 f80e 	bl	800089c <LCD_SendCommands>

	// b. Display Control
	LCD_SendCommands(LCD_CMD_DISPLAY_CURSOR_ON);
 8000880:	200e      	movs	r0, #14
 8000882:	f000 f80b 	bl	800089c <LCD_SendCommands>

	// c. Display Clear
	LCD_ClearDisplay();
 8000886:	f000 f861 	bl	800094c <LCD_ClearDisplay>

	// d. Entry Mode Set
	LCD_SendCommands(LCD_CMD_INCREMENT_CURSOR_NO_DISPLAY_SHIFT);
 800088a:	2006      	movs	r0, #6
 800088c:	f000 f806 	bl	800089c <LCD_SendCommands>


}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000

0800089c <LCD_SendCommands>:
 * Parameter 1	:	command (uint8_t)
 * Return Type	:	none (void)
 * Note		:
 * -------------------------------------------------------------------------------------------- */
void LCD_SendCommands(uint8_t command)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	 * Make:
	 * 	> RS = 0 (To select Instruction Register)
	 * 	> RW = 0 (To write to LCD)
	 *
	 * */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <LCD_SendCommands+0x40>)
 80008ac:	f7ff ff28 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2109      	movs	r1, #9
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <LCD_SendCommands+0x40>)
 80008b6:	f7ff ff23 	bl	8000700 <GPIO_WriteToOutputPin>
	 *	  [1] -> D5
	 *	  [2] -> D6
  	 *	  [3] -> D7
	 *
	 * */
	Write_4bits(command >> 4);		// Higher Nibble of the command
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f875 	bl	80009b0 <Write_4bits>

	/* -- Step 3. Send lower nibble of the command code to data lines -- */
	Write_4bits(command & 0x0F);		// Lower Nibble of the command
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f86e 	bl	80009b0 <Write_4bits>

}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000

080008e0 <LCD_SendChar>:
 * Parameter 1	:	data (uint8_t)
 * Return Type	:	none (void)
 * Note		:
 * -------------------------------------------------------------------------------------------- */
void LCD_SendChar(uint8_t data)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	 * Make:
	 * 	> RS = 1 (To select Data Register)
	 * 	> RW = 0 (To write to LCD)
	 *
	 * */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2108      	movs	r1, #8
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <LCD_SendChar+0x40>)
 80008f0:	f7ff ff06 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2109      	movs	r1, #9
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <LCD_SendChar+0x40>)
 80008fa:	f7ff ff01 	bl	8000700 <GPIO_WriteToOutputPin>
	 *	  [1] -> D5
	 *	  [2] -> D6
  	 *	  [3] -> D7
	 *
	 * */
	Write_4bits(data >> 4);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f853 	bl	80009b0 <Write_4bits>

	/* -- Step 3. Send lower nibble of the data to data lines -- */
	Write_4bits(data & 0x0F);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f84c 	bl	80009b0 <Write_4bits>

}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000

08000924 <LCD_SendString>:
 * Parameter 1	:	pointer to string (data) (char *)
 * Return Type	:	none (void)
 * Note		:
 * -------------------------------------------------------------------------------------------- */
void LCD_SendString(char *data)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	do
	{
		LCD_SendChar((uint8_t)*data++);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ffd3 	bl	80008e0 <LCD_SendChar>
	}
	while(*data != '\0');
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f4      	bne.n	800092c <LCD_SendString+0x8>

}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <LCD_ClearDisplay>:
 * Parameters	:	none (void)
 * Return Type	:	none (void)
 * Note		:
 * -------------------------------------------------------------------------------------------- */
void LCD_ClearDisplay(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	// a. Clear Display
	LCD_SendCommands(LCD_CMD_DISPLAY_CLEAR);
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff ffa3 	bl	800089c <LCD_SendCommands>

	// b. Wait for ~2ms
	Delay_ms(2);
 8000956:	2002      	movs	r0, #2
 8000958:	f000 f87a 	bl	8000a50 <Delay_ms>

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <LCD_SetCursor>:
 * Return Type	:	none (void)
 * Note		:	Possible values:	row		: 1 or 2	(for 16x2 display)
 * 									column	: 1 to 16
 * -------------------------------------------------------------------------------------------- */
void LCD_SetCursor(uint8_t row, uint8_t column)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
	column--;
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	3b01      	subs	r3, #1
 8000974:	71bb      	strb	r3, [r7, #6]

	switch(row)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d002      	beq.n	8000982 <LCD_SetCursor+0x22>
 800097c:	2b02      	cmp	r3, #2
 800097e:	d009      	beq.n	8000994 <LCD_SetCursor+0x34>
	case 2:
		// Set Cursor to 2nd Row and add index
		LCD_SendCommands((column |= 0xC0));
		break;
	default:
		break;
 8000980:	e011      	b.n	80009a6 <LCD_SetCursor+0x46>
		LCD_SendCommands((column |= 0x80));
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000988:	71bb      	strb	r3, [r7, #6]
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff85 	bl	800089c <LCD_SendCommands>
		break;
 8000992:	e008      	b.n	80009a6 <LCD_SetCursor+0x46>
		LCD_SendCommands((column |= 0xC0));
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800099a:	71bb      	strb	r3, [r7, #6]
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff7c 	bl	800089c <LCD_SendCommands>
		break;
 80009a4:	bf00      	nop
	}

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <Write_4bits>:
 * Parameters	:	valueToWrite (uint8_t)
 * Return Type	:	none (void)
 * Note		:	write given data or command to LCD via D7 D6 D5 D4 (4-Bit Interfacing)
 * -------------------------------------------------------------------------------------------- */
static void Write_4bits(uint8_t valueToWrite)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	// Write to LCD
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((valueToWrite >> 0) & 0x1));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	210b      	movs	r1, #11
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <Write_4bits+0x6c>)
 80009c8:	f7ff fe9a 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((valueToWrite >> 1) & 0x1));
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	210c      	movs	r1, #12
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <Write_4bits+0x6c>)
 80009de:	f7ff fe8f 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((valueToWrite >> 2) & 0x1));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	210d      	movs	r1, #13
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <Write_4bits+0x6c>)
 80009f4:	f7ff fe84 	bl	8000700 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((valueToWrite >> 3) & 0x1));
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	210e      	movs	r1, #14
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <Write_4bits+0x6c>)
 8000a0a:	f7ff fe79 	bl	8000700 <GPIO_WriteToOutputPin>

	// Instruct LCD to latch provided data
	LCD_Enable();
 8000a0e:	f000 f807 	bl	8000a20 <LCD_Enable>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <LCD_Enable>:
 * Note		:	After sending data or an instruction to the LCD,
 * 				a HIGH to LOW signal transition is provided on ENABLE pin for the LCD
 * 				to latch data on the data lines.
 * -------------------------------------------------------------------------------------------- */
static void LCD_Enable(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	// HIGH
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_E, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	210a      	movs	r1, #10
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <LCD_Enable+0x2c>)
 8000a2a:	f7ff fe69 	bl	8000700 <GPIO_WriteToOutputPin>

	// Wait for some time
	Delay_us(50);
 8000a2e:	2032      	movs	r0, #50	; 0x32
 8000a30:	f000 f827 	bl	8000a82 <Delay_us>

	// LOW
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_E, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	210a      	movs	r1, #10
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <LCD_Enable+0x2c>)
 8000a3a:	f7ff fe61 	bl	8000700 <GPIO_WriteToOutputPin>

	// Wait for some time
	Delay_us(300);
 8000a3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a42:	f000 f81e 	bl	8000a82 <Delay_us>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <Delay_ms>:
 * Parameters	:	ms (milliseconds)(uint32_t)
 * Return Type	:	none (void)
 * Note		:	Software based delay
 * -------------------------------------------------------------------------------------------- */
static void Delay_ms(uint32_t ms)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (ms * 1000); i++);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e002      	b.n	8000a64 <Delay_ms+0x14>
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3301      	adds	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3f4      	bcc.n	8000a5e <Delay_ms+0xe>
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <Delay_us>:
 * Parameters	:	us (microseconds)(uint32_t)
 * Return Type	:	none (void)
 * Note		:	Software based delay
 * -------------------------------------------------------------------------------------------- */
static void Delay_us(uint32_t us)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (us * 1); i++);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e002      	b.n	8000a96 <Delay_us+0x14>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3f8      	bcc.n	8000a90 <Delay_us+0xe>
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <main>:

#include "lcd_drivers.h"
#include <stdio.h>

int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	LCD_Init();
 8000ab0:	f7ff fe4c 	bl	800074c <LCD_Init>

	LCD_SendString(" ...TESTING...  ");
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <main+0x20>)
 8000ab6:	f7ff ff35 	bl	8000924 <LCD_SendString>
	LCD_SetCursor(2, 1);
 8000aba:	2101      	movs	r1, #1
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff ff4f 	bl	8000960 <LCD_SetCursor>
	LCD_SendString("www.lalitk.space");
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <main+0x24>)
 8000ac4:	f7ff ff2e 	bl	8000924 <LCD_SendString>


	while(1);
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x1c>
 8000aca:	bf00      	nop
 8000acc:	08000b88 	.word	0x08000b88
 8000ad0:	08000b9c 	.word	0x08000b9c

08000ad4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b02:	f000 f811 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff ffd1 	bl	8000aac <main>

08000b0a <LoopForever>:

LoopForever:
  b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   r0, =_estack
 8000b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b18:	08000bb8 	.word	0x08000bb8
  ldr r2, =_sbss
 8000b1c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b20:	2000001c 	.word	0x2000001c

08000b24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4d0d      	ldr	r5, [pc, #52]	; (8000b60 <__libc_init_array+0x38>)
 8000b2c:	4c0d      	ldr	r4, [pc, #52]	; (8000b64 <__libc_init_array+0x3c>)
 8000b2e:	1b64      	subs	r4, r4, r5
 8000b30:	10a4      	asrs	r4, r4, #2
 8000b32:	2600      	movs	r6, #0
 8000b34:	42a6      	cmp	r6, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	4d0b      	ldr	r5, [pc, #44]	; (8000b68 <__libc_init_array+0x40>)
 8000b3a:	4c0c      	ldr	r4, [pc, #48]	; (8000b6c <__libc_init_array+0x44>)
 8000b3c:	f000 f818 	bl	8000b70 <_init>
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	10a4      	asrs	r4, r4, #2
 8000b44:	2600      	movs	r6, #0
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b50:	4798      	blx	r3
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5a:	4798      	blx	r3
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08000bb0 	.word	0x08000bb0
 8000b64:	08000bb0 	.word	0x08000bb0
 8000b68:	08000bb0 	.word	0x08000bb0
 8000b6c:	08000bb4 	.word	0x08000bb4

08000b70 <_init>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	bf00      	nop
 8000b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b76:	bc08      	pop	{r3}
 8000b78:	469e      	mov	lr, r3
 8000b7a:	4770      	bx	lr

08000b7c <_fini>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr
